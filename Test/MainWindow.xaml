<Window x:Class="Test.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:controls="clr-namespace:PanelSW.WPF.Controls;assembly=PanelSwWpfControls"
        xmlns:commands="clr-namespace:PanelSW.WPF.Controls.Commands;assembly=PanelSwWpfControls"
        xmlns:converters="clr-namespace:PanelSW.WPF.Controls.Converters;assembly=PanelSwWpfControls"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        xmlns:wpf="clr-namespace:System.Windows;assembly=PresentationCore"
        mc:Ignorable="d"
        Title="MainWindow" Height="350" Width="525">

    <Window.CommandBindings>
        <CommandBinding Command="ApplicationCommands.Open"  Executed="OpenCommand_Executed"/>
    </Window.CommandBindings>
    <Window.Resources>
        <sys:String x:Key="ClickMe">Click me</sys:String>
        <wpf:Visibility x:Key="Visible">Visible</wpf:Visibility>
        <wpf:Visibility x:Key="Collapsed">Collapsed</wpf:Visibility>
        <wpf:Visibility x:Key="Hidden">Hidden</wpf:Visibility>
        <x:Array Type="sys:Boolean" x:Key="CollectionValues">
            <sys:Boolean>False</sys:Boolean>
        </x:Array>

        <Style x:Key="{x:Static controls:ResourceKeys.WaitableButtonBorderStyleKey}" BasedOn="{StaticResource {x:Static controls:ResourceKeys.WaitableButtonBorderStyleKey}}">
            <Setter Property="Border.BorderThickness" Value="3"/>
            <Setter Property="Border.BorderBrush" Value="Red"/>
            <Setter Property="Border.CornerRadius" Value="10"/>
        </Style>

        <Style x:Key="{x:Static controls:ResourceKeys.WaitableButtonProgressBarStyleKey}" BasedOn="{StaticResource {x:Static controls:ResourceKeys.WaitableButtonProgressBarStyleKey}}">
            <Setter Property="Control.Width" Value="80"/>
            <Setter Property="Control.Height" Value="40"/>
            <Setter Property="Control.Foreground" Value="Red"/>
            <Setter Property="ProgressBar.Minimum" Value="0"/>
            <Setter Property="ProgressBar.Maximum" Value="200"/>
            <Setter Property="ProgressBar.Value" Value="20"/>
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ProgressBar">
                        <Grid>
                            <Ellipse Fill="#FF6DB4EF" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsIndeterminate}" Value="True">
                                <DataTrigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation To="0" Storyboard.TargetProperty="Minimum" Duration="0:0:0" FillBehavior="HoldEnd"/>
                                            <DoubleAnimation To="100" Storyboard.TargetProperty="Maximum" Duration="0:0:0" FillBehavior="HoldEnd"/>
                                            <DoubleAnimation From="0" To="100" Storyboard.TargetProperty="Value" Duration="0:0:2" RepeatBehavior="Forever"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </DataTrigger.EnterActions>
                                <DataTrigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation To="0" Storyboard.TargetProperty="Minimum" Duration="0:0:0" FillBehavior="HoldEnd"/>
                                            <DoubleAnimation To="100" Storyboard.TargetProperty="Maximum" Duration="0:0:0" FillBehavior="HoldEnd"/>
                                            <DoubleAnimation To="0" Storyboard.TargetProperty="Value" Duration="0:0:0" FillBehavior="HoldEnd"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </DataTrigger.ExitActions>
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>

    <UniformGrid VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Columns="1">

        <controls:EyePasswordBox SecurePassword="{Binding SecurePassword, UpdateSourceTrigger=PropertyChanged}" 
                                 BorderThickness="1" BorderBrush="Gray" Padding="16,0,0,0"/>

        <controls:WaitableButton Content="{Binding Source={StaticResource ClickMe}, Converter={converters:RegexConverter RegexExpression='(\\w+) (\\w+)', Replacement='$1 $2 ?'}}"
                                 Click="WaitableButton_Click"/>

        <controls:WaitableButton Content="{Binding Source={StaticResource ClickMe}, Converter={converters:RegexConverter RegexExpression='(\\w+) (\\w+)', Replacement='$2 $1 !!!'}}"
                                 Style="{DynamicResource {x:Static controls:ResourceKeys.WaitableButtonBlinkingStyleKey}}"/>

        <controls:TextBoxWithButton Text="{Binding FilePath, UpdateSourceTrigger=PropertyChanged}" BorderBrush="Black" BorderThickness="1" Foreground="Black" Background="White" Padding="16,0,0,0"
                                    Command="ApplicationCommands.Open" CommandParameter="Text file (*.txt)|*.txt"/>
        <controls:TextBoxWithButton Text="{Binding FilePath, UpdateSourceTrigger=PropertyChanged}" BorderBrush="Black" BorderThickness="1" Foreground="Black" Background="White" Padding="16,0,0,0"
                                    Command="{commands:BrowseFolderCommand Description=Hi, ShowNewFolderButton=False, Folder={Binding FolderPath}}"/>


        <CheckBox x:Name="cb1_" Content="Check"/>
        <TextBlock Text="Visible if unchecked"
                   Visibility="{Binding ElementName=cb1_, Path=IsChecked, Converter={converters:IsInCollectionConverter EqualValue={StaticResource Visible}, InequalValue={StaticResource Hidden}, Collection={StaticResource CollectionValues}}}"
                   />
        <TextBlock Text="Visible if checked" IsEnabled="False"
                   Visibility="{Binding ElementName=cb1_, Path=IsChecked, Converter={converters:EqualityConverter EqualValue={StaticResource Hidden}, InequalValue={StaticResource Visible}, Collection={StaticResource CollectionValues}}}"
                   />
    </UniformGrid>
</Window>
